/*global $, ARS, Promise */

var ARS;
ARS = ARS || {};
ARS.Services = ARS.Services || {};
ARS.Services.WorkOrderService = (function () {
    "use strict";

    var config;
    config = {};
    config.incident = {};
    config.incident.entityName = "Incident";
    config.incident.statusCodePromise = null;

    function WorkOrderService(fetchXmlService, dataRepository) {
        if (!fetchXmlService) {
            throw new Error("Missing parameter: fetchXmlService");
        }

        if (!dataRepository) {
            throw new Error("Missing parameter: dataRepository");
        }

        this.fetchXmlService = fetchXmlService;
        this.dataRepository  = dataRepository;

        this.changeStatus = function (workOrder, statusName, complete) {
            var entityName, self;
            self = this;
            entityName = config.incident.entityName;

            return this
                .getStatusCodesAsync()
                .then(function (incidentStatusCodes) {
                    var id, object, status;

                    id = workOrder.workOrderId;

                    status = incidentStatusCodes.first(function (obj) {
                        return obj.label === statusName;
                    }).value;

                    object                        = {};
                    object.StatusCode             = {};
                    object.StatusCode.Value       = status;
                    object.ars_SchedulingComplete = complete;

                    return self.dataRepository
                        .updateRecordAsync(id, object, entityName);
                })
                .then(function () {
                    workOrder.status = statusName;
                    workOrder.schedulingComplete = complete;
                });
        };
    }

    WorkOrderService.prototype.getStatusCodesAsync = function () {
        var modelType = ARS.Models.IncidentStatusCode;

        if (config.incident.statusCodePromise === null) {
            config.incident.statusCodePromise = this.dataRepository
                .getOptionsAsync("incident", "StatusCode")
                .then(function (results) {
                    return results.map(modelType.fromOptionSet);
                });
        }

        return config.incident.statusCodePromise;
    };

    WorkOrderService.prototype.getWorkOrdersAsync =
        function (filters, paging) {
            var query;
            paging             = paging || {};
            query              = new ARS.Queries.WorkOrderQuery();
            query.page         = paging.page || 1;
            query.pagingCookie = paging.cookie;
            query.perPage      = 20;

            filters = filters || [];

            filters.forEach(function (filter) {
                if (filter && $.isFunction(filter.applyToWorkOrderQuery)) {
                    filter.applyToWorkOrderQuery(query);
                }
            });

            return query.execute(this.fetchXmlService);
        };

    WorkOrderService.prototype.assignWorkOrder = function (workOrder) {
        return this.changeStatus(workOrder, "Scheduled", true);
    };

    WorkOrderService.prototype.unassignWorkOrder = function (workOrder) {
        return this.changeStatus(workOrder, "Accepted", false);
    };

    WorkOrderService.prototype.getWorkOrderDuration = function (workOrderId) {
        var query = new ARS.Queries.DurationQuery(workOrderId);

        return this.fetchXmlService
            .retrieveMultiple(query.generateFetchXml())
            .then(function (response) {
                var hasValue;

                hasValue =
                    response &&
                    response.hasOwnProperty("totalHours") &&
                    typeof response.totalHours === "number" &&
                    isNaN(response.totalHours) === false &&
                    isFinite(response.totalHours) === true;

                // 4 === random number, generated by random dice roll.
                return hasValue ? response.totalHours : 4;
            });
    };

    WorkOrderService.prototype.toggleCompleted = function (workOrder) {
        var completed = !workOrder.schedulingComplete;
        return this.changeStatus(workOrder, workOrder.status, completed);
    };

    return WorkOrderService;
}());
